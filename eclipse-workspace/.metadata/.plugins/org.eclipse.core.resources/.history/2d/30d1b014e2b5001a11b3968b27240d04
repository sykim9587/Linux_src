#include <stdio.h>
#include <pthread.h>
#include <unistd.h>
#include <semaphore.h>

void* thread_main1(void* arg);
void* thread_main2(void* arg);
void* thread_main3(void* arg);

static sem_t sem_one;
static sem_t sem_two;
static sem_t sem_thr;

int main(int argc, char * argv[]){
	pthread_t t_id1, t_id2, t_id3;
	sem_init(&sem_one, 0, 0);
	sem_init(&sem_two, 0, 1);
	sem_init(&sem_thr, 0, 2);
	int thread_param=5;

	if(pthread_create(&t_id1, NULL, thread_main1, (void*)&thread_param)!=0){
		puts("pthread1_create() error");
		return -1;
	};
	if(pthread_create(&t_id2, NULL, thread_main2, (void*)&thread_param)!=0){
		puts("pthread2_create() error");
		return -1;
	};
	if(pthread_create(&t_id3, NULL, thread_main3, (void*)&thread_param)!=0){
		puts("pthread2_create() error");
		return -1;
	};
	pthread_join(t_id1, NULL);
	pthread_join(t_id2, NULL);
	pthread_join(t_id3, NULL);
	//wait until the thread is finished

	sem_destroy(&sem_one);
	sem_destroy(&sem_two);
	sem_destroy(&sem_thr);
	return 0;
}

void* thread_main1(void* arg)
{
	int i;
	int cnt=*((int*)arg);
	for(i=0; i<cnt; i++){
		sleep(1); puts("running thread1");
	}
	return NULL;
}

void* thread_main2(void* arg)
{
	int i;
	int cnt=*((int*)arg);
	for(i=0; i<cnt; i++){
		sleep(1); puts("running thread2");
	}
	return NULL;
}

void* thread_main3(void* arg)
{
	int i;
	int cnt=*((int*)arg);
	for(i=0; i<cnt; i++){
		sleep(1); puts("running thread3");
	}
	return NULL;
}
